삽입정렬
  - 순서에 따라 삽입하여 정렬하는 방법
  - 자료배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 부분과 비교하여 자신의 위치를 찾아 삽입
  - 매순서마다 삽입할 수 있는 위치를 찾아 해당 위치에 넣는다
  
  C코드
void insertionSort(int arry[], int size){
  int i,j,key;
  for(i = 1;i<size ;i++){
    key = list[i];
    for(j=i-1;j>=0 && arry[j] > key ;j--){
       arry[j+1] = arry[j];
    }
    arry[j+1] = key;
  }
}
시간복잡도
  최선의 경우
    - 이동없이 1번의 비교 O(n)
  최악의 경우(자료가 역순일때)
    - 루프반복마다 i번의 비교 O(n^2)
    
버블정렬
  - 인접데이터를 비교하여 크기에 따라 데이터의 위치를 바꾸어 정렬
  - rkseksgks rndus
  
  C코드
void BubbleSort(int arry[], int size){
  int i,j,temp;
  for(i = n-1; i>0;i--){
    for(j=0; j <i;j++){
      if(arry[j] > arry[j+1]){
        temp = arry[j+1];
        arry[j+1] = arry[j];
        arry[j] = temp;
      }
    }
  }
}
시간복잡도
  최선의 최악 모두 일정 O(n^2)
  모든경우 비교해야함
    
선택정렬
  - In-place sorting 알고리즘의 하나
    입력 배열이외의 다른 추가메모리를 요구하지 않는다
  - 해당 순서에 원소를 넣을 위치가 정해져있고 어떤 원소를 넣을지 선택하는 알고리즘
  
  C코드
void SelectionSort(int arry[], int size){
  int i,j,temp,min;
  for( i= 0; i< size-1;i++){
    min = i;
    for( j= i+1;j<size;j++){
      if(arry[min] > arry[j])
        min = j;
    }
      if(i != min){
        temp = arry[i];
        arry[i] = arry[min];
        arry[min] = temp;
      }
    }
 }
시간복잡도
  최선의 최악 모두 일정 O(n^2)

셀정렬
  - 삽입정렬을 보완한 알고리즘 
  - 삽입정렬이 어느정도 정렬된 배열에 대해서는 빠른것에 착안
    리스트를 한번에 정렬하지 않는다
 설명
    먼저 정렬해야 할 리스트를 일정한 기준에 따라 분류
    연속적이지 않은 여러 개의 부분 리스트를 생성
    각 부분 리스트를 삽입 정렬을 이용하여 정렬
    모든 부분 리스트가 정렬되면 다시 전체 리스트를 더 적은 개수의 부분 리스트로 만든 후에 알고리즘을 반복
    위의 과정을 부분 리스트의 개수가 1이 될 때까지 반복
  C코드
void InsertionSort(int arry[], int first, int last, int gap){
  int i,j,key;
  for(i= first+gap; i<=last;i = i+gap){
    key = list[i];
     for(j = i-gap; j >= first && arry[j] > key;j= j-gap){
      arry[j+gap] = arry[j];
    }
    arry[j+gap] = key;
  }
}

void ShellSort(int list[], int size){
  int i , gap;
  for(gap = n/2; gap >0; gap = gap/2){
    if((gap%2) == 0){
      gap++;
    }
    
    for(i=0;i<gap;i++){
      InsertionSort(list,i,size-1,gap);
    }
  }
}
  
평균: T(n) = O(n^1.5)
최악의 경우: T(n) = O(n^2)

퀵정렬
  - 불안정 정렬
    다른원소와의 비교만으로 정렬을 수행하는 비교 정렬에 속함
  - 분할 정복 방법
  
C코드
int partition(int  arry[], int left, int right){
  int pivoit, temp;
  int low, high;
  low = left+1;
  high = right;
  pivot = arry[left];
  
  while(low <= high){
    while(pivot >= arry[low] && low <= right){
      low++;
    } 
    while(pivot <= arry[high] && >= (left +1)){
      high--;
    }
    if(low <= high){
      Swap(arr,low,high);
    }
  }
  Swap(arr,left,high);
  return high;
}
void QuickSort(int arry[], int left, int right){
  if(left <= right){
    int pivot = Partition(arry,left,right);
    QuickSort(arry, left, pivot -1);
    QuickSort(arry,pivot +1,right);
  }
}


시간복잡도
최선의 경우 T(n) = O(nlog₂n)
최악의 경우 T(n) = O(n^2)

병합정렬
  - 분할 정복 알고리즘
    작은문제를 2개로 분리하고 해결한다음 결과를 모아 원래의 문제를 해결하는 방법
    순환호출을 이용하여 구현
      분할(Divide): 입력 배열을 같은 크기의 2개의 부분 배열로 분할한다.
      정복(Conquer): 부분 배열을 정렬한다. 부분 배열의 크기가 충분히 작지 않으면 순환 호출 을 이용하여 다시 분할 정복 방법을 적용한다.
      결합(Combine): 정렬된 부분 배열들을 하나의 배열에 합병한다.
      
  C코드
int sorted[MAX_SIZE]
void merge(int arry[], int left, int mid, int right){
  int i,j,k,l;
  i = left;
  j= mid+1;
  k = left;
  
  while(i<=mid && j<= right){
    if(arry[i] <= arry[j])
      sorted[k++] = list[i++];
    else
      sorted[k++] = list[j++];
  }
  if(i>mid){
    for(l = j; l<=right ;l++)
      sorted[k++] = arry[l];
  }
  else{
    for(l = i; l<=mid;l++)
      sorted[k++] = list[l];
  }
  for(l = left; l <= right; l++){
    list[l] = sorted[l];
  }
}

void mergeSort(int arry[], int left, int right){
  int mid;
  if(left < right){
    mid = (left+ right) /2;
    mergeSort(list,left,mid);
    mergeSort(list,mid+1,right);
    merge(list,left,mid,right);
  }
}
단점
  임시배열이 필요하며 제자리 정렬이 아니다.

시간복잡도
  O(nlog^2n)
